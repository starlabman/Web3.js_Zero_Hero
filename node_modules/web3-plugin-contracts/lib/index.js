"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContract = exports.getSource = exports.ContractPlugin = void 0;
const web3_1 = require("web3");
const scanners_1 = require("./scanners");
const chains_1 = require("./chains");
class ContractPlugin extends web3_1.Web3PluginBase {
    constructor(apiKey = "") {
        super();
        this.pluginNamespace = "contractPlugin";
        this.explorerAPIKey = "";
        this.explorerAPIKey = apiKey;
    }
    async source(contractAddress) {
        const chainId = await web3_1.eth.getChainId(this, {
            number: web3_1.FMT_NUMBER.NUMBER,
            bytes: web3_1.FMT_BYTES.HEX,
        });
        return (0, exports.getSource)(contractAddress, {
            chainId: chainId.toString(),
            apiKey: this.explorerAPIKey,
        });
    }
    async contract(contractAddress) {
        const chainId = await web3_1.eth.getChainId(this, {
            number: web3_1.FMT_NUMBER.NUMBER,
            bytes: web3_1.FMT_BYTES.HEX,
        });
        const contract = await (0, exports.getContract)(contractAddress, {
            chainId: chainId.toString(),
            apiKey: this.explorerAPIKey,
        });
        contract.setProvider(this.currentProvider);
        return contract;
    }
    set updateKey(key) {
        this.explorerAPIKey = key;
    }
    ping() {
        return "pong";
    }
    async chainId() {
        const chainResponse = await this.requestManager?.send({
            method: "eth_chainId",
            params: [],
        });
        if (!chainResponse) {
            throw new Error("Chain ID not found");
        }
        return parseInt(chainResponse, 16);
    }
}
exports.ContractPlugin = ContractPlugin;
const getSource = async (contractAddress, options) => {
    const scanner = (0, scanners_1.getScanner)(options.chainId, options.apiKey);
    if (!scanner) {
        throw new Error("Chain may not be supported");
    }
    return await scanner.getSourceCode(contractAddress);
};
exports.getSource = getSource;
const getContract = async (contractAddress, options) => {
    const data = await (0, exports.getSource)(contractAddress, options);
    if (!data.result) {
        throw new Error(data.message || "Contract not found");
    }
    if (typeof data.result === "string") {
        throw new Error(data.result);
    }
    if (!data.result[0].ABI || !data.result[0].ABI.startsWith("[")) {
        throw new Error(data.result[0].ABI || "ABI not found");
    }
    switch (options.chainId) {
        case chains_1.ChainID.XDC_MAINNET:
            contractAddress = "0x" + contractAddress.slice(3);
    }
    const abi = JSON.parse(data.result[0].ABI);
    const contractABI = [...abi];
    const contract = new web3_1.Contract(contractABI, contractAddress);
    return contract;
};
exports.getContract = getContract;
//# sourceMappingURL=index.js.map