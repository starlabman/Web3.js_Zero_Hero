"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractPaths = void 0;
const path_1 = __importDefault(require("path"));
class ContractPaths {
    constructor(originalPath, fromPath) {
        this.originalFilePath = originalPath;
        this.parentPath = fromPath;
        const { filePath } = normalizeDependency(originalPath, fromPath);
        this.filePath = filePath;
        this.folderPath = "";
        if (this.isHttp()) {
            this.folderPath = filePath.replace(/https:\/\/raw.githubusercontent.com\/[a-zA-Z0-9\-]+\/[a-zA-Z0-9\-]+\/[a-zA-Z0-9\-]+\//, "");
        }
    }
    isHttp() {
        return this.filePath.startsWith("http");
    }
}
exports.ContractPaths = ContractPaths;
function normalizeDependency(dependency, filePath) {
    if (dependency.startsWith("./") || dependency.startsWith("../")) {
        if (filePath.startsWith("http://") || filePath.startsWith("https://")) {
            const { hostname, pathname, protocol } = new URL(filePath);
            const { dir } = path_1.default.parse(`${hostname}${pathname}`);
            dependency = path_1.default.join(dir, dependency);
            dependency = path_1.default.normalize(dependency);
            dependency = `${protocol}//${dependency}`;
        }
        else {
            const { dir } = path_1.default.parse(filePath);
            dependency = path_1.default.join(dir, dependency);
            dependency = path_1.default.normalize(dependency);
        }
    }
    return {
        filePath: dependency
            .replace(/\\/g, "/")
    };
}
//# sourceMappingURL=paths.js.map