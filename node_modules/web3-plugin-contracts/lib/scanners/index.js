"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getScanner = void 0;
const chains_1 = require("../chains");
const blockscout_new_1 = require("./blockscout-new");
const blockscout_old_1 = require("./blockscout-old");
const blocksscan_1 = require("./blocksscan");
const btrscan_1 = require("./btrscan");
const chain_lens_1 = require("./chain-lens");
const confluxscan_1 = require("./confluxscan");
const core_scan_1 = require("./core-scan");
const ethernal_1 = require("./ethernal");
const etherscan_1 = require("./etherscan");
const filscan_1 = require("./filscan");
const roninchain_1 = require("./roninchain");
const tronscan_1 = require("./tronscan");
const vicscan_1 = require("./vicscan");
const getScanner = (chainId, apiKey = "") => {
    switch (chainId) {
        case chains_1.ChainID.METIS_ANDROMEDA:
        case chains_1.ChainID.METIS_SEPOLIA:
        case chains_1.ChainID.MANTLE_MAINNET:
        case chains_1.ChainID.MANTLE_TESTNET:
        case chains_1.ChainID.KAVA_MAINNET:
        case chains_1.ChainID.KAVA_TESTNET:
        case chains_1.ChainID.ROLLUX_MAINNET:
        case chains_1.ChainID.ROLLUX_TESTNET:
        case chains_1.ChainID.CANTO_TESTNET:
        case chains_1.ChainID.ASTAR_MAINNET:
        case chains_1.ChainID.ACALA_MAINNET:
        case chains_1.ChainID.MANDALA_TESTNET:
        case chains_1.ChainID.REI_MAINNET:
        case chains_1.ChainID.REI_TESTNET:
        case chains_1.ChainID.CALLISTO_MAINNET:
        case chains_1.ChainID.OASIS_EMERALD:
        case chains_1.ChainID.OASIS_SAPPHIRE:
        case chains_1.ChainID.OASIS_SAPPHIRE_TESTNET:
        case chains_1.ChainID.FLARE_MAINNET:
        case chains_1.ChainID.FLARE_COSTON:
        case chains_1.ChainID.FLARE_COSTON2:
        case chains_1.ChainID.VELAS_MAINNET:
            return new blockscout_old_1.BlockScoutOldClient(chainId, apiKey);
        case chains_1.ChainID.IMMUTABLE_MAINNET:
        case chains_1.ChainID.IMMUTABLE_TESTNET:
        case chains_1.ChainID.CANTO_MAINNET:
        case chains_1.ChainID.MANTA_PACIFIC:
        case chains_1.ChainID.MANTA_TESTNET:
        case chains_1.ChainID.ZETACHAIN_TESTNET:
        case chains_1.ChainID.FUSE_MAINNET:
        case chains_1.ChainID.FUSE_SPARK:
        case chains_1.ChainID.ASTAR_MAINNET:
        case chains_1.ChainID.SHIDEN_MAINNET:
        case chains_1.ChainID.SHUBIYA_TESTNET:
        case chains_1.ChainID.LUKSO_MAINNET:
        case chains_1.ChainID.LUKSO_TESTNET:
        case chains_1.ChainID.ZORA_NETWORK_MAINNET:
        case chains_1.ChainID.NEON_MAINNET:
        case chains_1.ChainID.NEON_TESTNET:
        case chains_1.ChainID.AURORA_MAINNET:
        case chains_1.ChainID.AURORA_TESTNET:
        case chains_1.ChainID.PUBLIC_GOOD_NETWORK:
        case chains_1.ChainID.PUBLIC_GOOD_NETWORK_SEPOLIA:
        case chains_1.ChainID.ROOTSTOCK_MAINNET:
        case chains_1.ChainID.ROOTSTOCK_TESTNET:
        case chains_1.ChainID.LIGHTLINK_PHOENIX_MAINNET:
        case chains_1.ChainID.LIGHTLINK_PEGASUS_TESTNET:
        case chains_1.ChainID.ETHERLINK_TESTNET:
        case chains_1.ChainID.MODE_MAINNET:
        case chains_1.ChainID.MODE_SEPOLIA:
        case chains_1.ChainID.MORPH_TESTNET:
        case chains_1.ChainID.SYNDICATE_FRAME_MAINNET:
        case chains_1.ChainID.DOS_MAINNET:
        case chains_1.ChainID.DOS_TESTNET:
        case chains_1.ChainID.DEGEN_MAINNET:
        case chains_1.ChainID.TAIKO_KATLA_TESTNET:
        case chains_1.ChainID.SHIMMER_MAINNET:
        case chains_1.ChainID.SHIMMER_TESTNET:
        case chains_1.ChainID.XRP_SIDECHAIN:
        case chains_1.ChainID.ETHEREUM_CLASSIC_MAINNET:
        case chains_1.ChainID.ETHEREUM_CLASSIC_TESTNET:
        case chains_1.ChainID.STABILITY_MAINNET:
        case chains_1.ChainID.STABILITY_TESTNET:
        case chains_1.ChainID.LISK_MAINNET:
        case chains_1.ChainID.LISK_SEPOLIA:
        case chains_1.ChainID.REDSTONE_MAINNET:
        case chains_1.ChainID.REDSTONE_GARNET_TESTNET:
        case chains_1.ChainID.OPEN_CAMPUS_CODEX:
            return new blockscout_new_1.BlockScoutClient(chainId, apiKey);
        case chains_1.ChainID.XDC_MAINNET:
            return new blocksscan_1.BlocksScanClient(chainId, apiKey);
        case chains_1.ChainID.RONIN_MAINNET:
        case chains_1.ChainID.RONIN_SAIGON_TESTNET:
            return new roninchain_1.RoninChainClient(chainId, apiKey);
        case chains_1.ChainID.CONFLUX_MAINNET:
        case chains_1.ChainID.CONFLUX_TESTNET:
            return new confluxscan_1.ConfluxScanClient(chainId, apiKey);
        case chains_1.ChainID.FILECOIN_MAINNET:
        case chains_1.ChainID.FILECOIN_CALIBRATION:
            return new filscan_1.FilScanClient(chainId, apiKey);
        case chains_1.ChainID.TRON_MAINNET:
        case chains_1.ChainID.TRON_NILE_TESTNET:
        case chains_1.ChainID.TRON_SHASTA_TESTNET:
            return new tronscan_1.TronScanClient(chainId, apiKey);
        case chains_1.ChainID.VICTION_MAINNET:
        case chains_1.ChainID.VICTION_TESTNET:
            return new vicscan_1.VicScanClient(chainId, apiKey);
        case chains_1.ChainID.PALM_MAINNET:
        case chains_1.ChainID.PALM_TESTNET:
        case chains_1.ChainID.METER_MAINNET:
        case chains_1.ChainID.METER_TESTNET:
            return new chain_lens_1.ChainLensClient(chainId);
        case chains_1.ChainID.CORE_MAINNET:
            return new core_scan_1.CoreScanClient(chainId, apiKey);
        case chains_1.ChainID.BITLAYER_MAINNET:
        case chains_1.ChainID.BITLAYER_TESTNET:
            return new btrscan_1.BTRScanClient(chainId, apiKey);
        case chains_1.ChainID.COTI_DEVNET:
            return new ethernal_1.EthernalClient(chainId, apiKey);
        default:
            return new etherscan_1.EtherScanClient(chainId, apiKey);
    }
};
exports.getScanner = getScanner;
//# sourceMappingURL=index.js.map