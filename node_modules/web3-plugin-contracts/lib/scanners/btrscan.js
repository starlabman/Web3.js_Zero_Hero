"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BTRScanClient = void 0;
const base_1 = require("./base");
const explorer_service_1 = require("./explorer-service");
class BTRScanClient extends base_1.BaseScan {
    constructor(chainId, apiKey) {
        super(chainId, apiKey);
    }
    getSourceCodeEndpoint(address) {
        return `scan/api?module=contract&action=getsourcecode&address=${address}`;
    }
    async call(address) {
        const apiUrl = this.getsourcecodeURL(address);
        if (!apiUrl) {
            return (0, explorer_service_1.generateSourceCodeError)("API Endpoint not found");
        }
        const response = await fetch(apiUrl);
        if (!response || !response.ok) {
            return (0, explorer_service_1.generateSourceCodeError)("Error fetching contract");
        }
        let data = (await response.json());
        return data;
    }
    async getSourceCode(address) {
        let data = await this.call(address);
        if (data.data?.implementation) {
            data = await this.call(data.data?.implementation || address);
        }
        return await this.convert(data, address);
    }
    async convert(data, address) {
        if (!data.result || !data.result[0]) {
            return {
                status: "0",
                message: "NOTOK",
                result: data.message || "Error loading contract",
            };
        }
        return {
            status: "1",
            message: "OK",
            result: [
                {
                    SourceCode: data.result[0]?.SourceCode,
                    ABI: data.result[0]?.abi || "[]",
                    ContractName: data.result[0]?.contractName || "",
                    CompilerVersion: data.result[0]?.compilerVersion || "0",
                    OptimizationUsed: data.result[0]?.optimizationUsed || "0",
                    Runs: data.result[0]?.runs || "200",
                    ConstructorArguments: data.result[0]?.constructorArguments || "",
                    EVMVersion: data.evmVersion || "default",
                    Library: data.result[0]?.library || "",
                    LicenseType: data.result[0]?.licenseType || "None",
                    Proxy: data.result[0]?.proxy || "",
                    Implementation: data.result[0]?.implementation || "[]",
                    SwarmSource: data.result[0]?.swarmSource || "",
                },
            ],
        };
    }
}
exports.BTRScanClient = BTRScanClient;
//# sourceMappingURL=btrscan.js.map