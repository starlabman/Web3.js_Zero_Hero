"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthernalClient = void 0;
const base_1 = require("./base");
const explorer_service_1 = require("./explorer-service");
class EthernalClient extends base_1.BaseScan {
    constructor(chainId, apiKey) {
        super(chainId, apiKey);
    }
    getSourceCodeEndpoint(address) {
        return `api/contracts/${address}?firebaseUserId=4SLyFFkgeJeePC39HgcRLLfy1qp1&workspace=unsightly-mango-air`;
    }
    async call(address) {
        const apiUrl = this.getsourcecodeURL(address);
        if (!apiUrl) {
            return (0, explorer_service_1.generateSourceCodeError)("API Endpoint not found");
        }
        const response = await fetch(apiUrl);
        if (!response || !response.ok) {
            return (0, explorer_service_1.generateSourceCodeError)("Error fetching contract");
        }
        let data = (await response.json());
        return data;
    }
    async getSourceCode(address) {
        let data = await this.call(address);
        if (data.data?.implementation) {
            data = await this.call(data.data?.implementation || address);
        }
        return await this.convert(data, address);
    }
    async convert(data, address) {
        if (!data || !data.verification) {
            return {
                status: "0",
                message: "NOTOK",
                result: "Contract not verified",
            };
        }
        let sourceInput = {
            sources: {},
        };
        if (data.verification?.sources) {
            data.verification.sources.forEach((source) => {
                sourceInput.sources[source.fileName] = { content: source.content };
            });
        }
        return {
            status: "1",
            message: "OK",
            result: [
                {
                    SourceCode: `{${JSON.stringify(sourceInput)}}`,
                    ABI: JSON.stringify(data.abi) || "[]",
                    ContractName: data.verification?.contractName || "",
                    CompilerVersion: data.verification?.compilerVersion || "0",
                    OptimizationUsed: data.verification?.optimizationUsed || "0",
                    Runs: data.verification?.runs || "200",
                    ConstructorArguments: data.verification?.constructorArguments || "",
                    EVMVersion: data.verification?.evmVersion || "default",
                    Library: data.verification?.libraries || "{}",
                    LicenseType: "None",
                    Proxy: "",
                    Implementation: data.proxyContract || "[]",
                    SwarmSource: "",
                },
            ],
        };
    }
}
exports.EthernalClient = EthernalClient;
//# sourceMappingURL=ethernal.js.map