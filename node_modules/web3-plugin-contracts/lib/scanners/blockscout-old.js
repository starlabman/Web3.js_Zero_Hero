"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockScoutOldClient = void 0;
const web3_validator_1 = require("web3-validator");
const base_1 = require("./base");
const explorer_service_1 = require("./explorer-service");
class BlockScoutOldClient extends base_1.BaseScan {
    constructor(chainId, apiKey) {
        super(chainId, apiKey);
    }
    async getSourceCode(address) {
        let data = await this.call(address);
        if (data.status === "0") {
            return data;
        }
        const result = data.result[0];
        if ((0, web3_validator_1.isAddress)(result.ImplementationAddress)) {
            data = await this.call(result.ImplementationAddress);
        }
        return await this.convert(data, address);
    }
    async convert(data, address) {
        if (data.result && data.result[0]) {
            if (!data.result[0].SourceCode) {
                return (0, explorer_service_1.generateSourceCodeError)("Contract source code not verified");
            }
            if (data.result[0].AdditionalSources) {
                let sources = {};
                const sourceName = data.result[0].FileName || data.result[0].ContractName;
                sources[sourceName] = {
                    content: data.result[0].SourceCode,
                };
                data.result[0].AdditionalSources.forEach((element) => {
                    if (element.Filename.startsWith("/")) {
                        element.Filename = element.Filename.slice(1);
                    }
                    sources[element.Filename] = {
                        content: element.SourceCode,
                    };
                });
                if (data.result[0].CompilerSettings) {
                    if (data.result[0].CompilerSettings.compilationTarget) {
                        delete data.result[0].CompilerSettings.compilationTarget;
                    }
                    if (data.result[0].CompilerSettings.Libraries) {
                        delete data.result[0].CompilerSettings.Libraries;
                    }
                }
                const input = {
                    settings: data.result[0].CompilerSettings,
                    sources: sources,
                };
                input.language = "Solidity";
                data.result[0].SourceCode = `{${JSON.stringify(input)}}`;
            }
        }
        return data;
    }
}
exports.BlockScoutOldClient = BlockScoutOldClient;
//# sourceMappingURL=blockscout-old.js.map