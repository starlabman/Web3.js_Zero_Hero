"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VicScanClient = void 0;
const solidity_1 = require("../solidity");
const base_1 = require("./base");
const explorer_service_1 = require("./explorer-service");
class VicScanClient extends base_1.BaseScan {
    constructor(chainId, apiKey) {
        super(chainId, apiKey);
        this.headers = new Headers();
        this.headers.append("Content-Type", "application/json");
    }
    getSourceCodeEndpoint(address) {
        return `api/account/${address}`;
    }
    async getSourceCode(address) {
        const apiUrl = this.getsourcecodeURL(address);
        if (!apiUrl) {
            return (0, explorer_service_1.generateSourceCodeError)("API Endpoint not found");
        }
        const response = await fetch(apiUrl);
        if (!response || !response.ok) {
            return (0, explorer_service_1.generateSourceCodeError)("Error fetching contract");
        }
        return await this.convert(await response.json(), address);
    }
    async convert(data, address) {
        if (data.status === 400 || data.error) {
            return (0, explorer_service_1.generateSourceCodeError)(data.error.message || "Error loading contract");
        }
        if (!data.contractData) {
            return (0, explorer_service_1.generateSourceCodeError)("Contract not found");
        }
        let results = this.generateDefaultResult();
        let sourceInput = {
            sources: data.contractData.sourceCode,
        };
        results.SourceCode = `{${JSON.stringify(sourceInput)}}`;
        results.ABI = data.contractData.abiCode || "";
        results.OptimizationUsed = "0";
        results.Runs = "0";
        results.LicenseType = "0";
        results.CompilerVersion = data.contractData.compiler || solidity_1.solcVersion;
        results.ContractName = this.appendExtension(data.contractData.contractName);
        return {
            status: "1",
            message: "OK",
            result: [results],
        };
    }
}
exports.VicScanClient = VicScanClient;
//# sourceMappingURL=vicscan.js.map