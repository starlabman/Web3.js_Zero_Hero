"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlocksScanClient = void 0;
const base_1 = require("./base");
const explorer_service_1 = require("./explorer-service");
class BlocksScanClient extends base_1.BaseScan {
    constructor(chainId, apiKey) {
        super(chainId, apiKey);
    }
    getSourceCodeEndpoint(address) {
        return `api/contracts/${address}`;
    }
    async getSourceCode(address) {
        const apiUrl = this.getsourcecodeURL(address);
        if (!apiUrl) {
            return (0, explorer_service_1.generateSourceCodeError)("API Endpoint not found");
        }
        const response = await fetch(apiUrl);
        if (!response || !response.ok) {
            return (0, explorer_service_1.generateSourceCodeError)("Error fetching contract");
        }
        return await this.convert(await response.json(), address);
    }
    async convert(data, address) {
        if (data.errors || !data.abiCode) {
            return (0, explorer_service_1.generateSourceCodeError)("Error loading contract");
        }
        return {
            status: "1",
            message: "OK",
            result: [
                {
                    SourceCode: data.sourceCode,
                    ABI: data.abiCode,
                    ContractName: data.contractName,
                    CompilerVersion: data.compiler,
                    OptimizationUsed: data.optimization ? "1" : "0",
                    Runs: data.optimizationRuns || "200",
                    ConstructorArguments: data.constructorArguments || "",
                    EVMVersion: data.evmVersion || "default",
                    Library: "",
                    LicenseType: "0",
                    Proxy: "",
                    Implementation: "",
                    SwarmSource: "",
                },
            ],
        };
    }
}
exports.BlocksScanClient = BlocksScanClient;
//# sourceMappingURL=blocksscan.js.map